[{"C:\\Users\\ATHUL\\amplifyapp\\src\\index.js":"1","C:\\Users\\ATHUL\\amplifyapp\\src\\App.js":"2","C:\\Users\\ATHUL\\amplifyapp\\src\\reportWebVitals.js":"3","C:\\Users\\ATHUL\\amplifyapp\\src\\aws-exports.js":"4","C:\\Users\\ATHUL\\amplifyapp\\src\\graphql\\mutations.js":"5","C:\\Users\\ATHUL\\amplifyapp\\src\\graphql\\queries.js":"6","C:\\Users\\ATHUL\\amplifyapp\\src\\updateUser.js":"7"},{"size":618,"mtime":1608901006740,"results":"8","hashOfConfig":"9"},{"size":4274,"mtime":1609177439594,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":873,"mtime":1608998972082,"results":"12","hashOfConfig":"9"},{"size":952,"mtime":1608998966153,"results":"13","hashOfConfig":"9"},{"size":622,"mtime":1608998966105,"results":"14","hashOfConfig":"9"},{"size":294,"mtime":1609151892206,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1m9pmt4",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\ATHUL\\amplifyapp\\src\\index.js",[],["32","33"],"C:\\Users\\ATHUL\\amplifyapp\\src\\App.js",["34"],"import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport { API, Storage } from 'aws-amplify';\r\nimport { withAuthenticator, AmplifySignOut } from '@aws-amplify/ui-react';\r\nimport { listNotes } from './graphql/queries';\r\nimport { createNote as createNoteMutation, deleteNote as deleteNoteMutation, updateNote as updateNoteMutation } from './graphql/mutations';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nconst initialFormState = { name: '', description: '' }\r\n\r\nfunction App() {\r\n  const [notes, setNotes] = useState([]);\r\n  const [formData, setFormData] = useState(initialFormState);\r\n  const [isUpdate, setUpdate] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchNotes();\r\n  }, []);\r\n\r\n  async function fetchNotes() {\r\n    const apiData = await API.graphql({ query: listNotes });\r\n    const notesFromAPI = apiData.data.listNotes.items;\r\n    await Promise.all(notesFromAPI.map(async note => {\r\n      if (note.image) {\r\n        const image = await Storage.get(note.image);\r\n        note.image = image;\r\n      }\r\n      return note;\r\n    }))\r\n    setNotes(apiData.data.listNotes.items);\r\n  }\r\n\r\n  async function createNote() {\r\n      if(isUpdate){\r\n        if (!formData.name || !formData.description) return;\r\n        console.log(\"formData\",formData)\r\n        await API.graphql({ query: updateNoteMutation, variables: { input: formData } });\r\n        // await API.graphql({ query: deleteNoteMutation, variables: { input: { id } }});\r\n\r\n    if (formData.image) {\r\n      const image = await Storage.get(formData.image);\r\n      formData.image = image;\r\n    }\r\n    fetchNotes();\r\n    setUpdate(false);\r\n    setFormData(initialFormState);\r\n      }\r\n      else{\r\n        if (!formData.name || !formData.description) return;\r\n    await API.graphql({ query: createNoteMutation, variables: { input: formData } });\r\n    if (formData.image) {\r\n      const image = await Storage.get(formData.image);\r\n      formData.image = image;\r\n    }\r\n    // setNotes([ ...notes, formData ]);\r\n    fetchNotes();\r\n    setFormData(initialFormState);\r\n      }\r\n    \r\n  }\r\n\r\n  async function updateNote({id,name,description}){\r\n    let request={id, name, description};\r\n    setFormData(request);\r\n    setUpdate(true);\r\n  }\r\n\r\n  async function deleteNote({ id }) {\r\n    const newNotesArray = notes.filter(note => note.id !== id);\r\n    setNotes(newNotesArray);\r\n    await API.graphql({ query: deleteNoteMutation, variables: { input: { id } }});\r\n  }\r\n  async function onChange(e) {\r\n    if (!e.target.files[0]) return\r\n    const file = e.target.files[0];\r\n    setFormData({ ...formData, image: file.name });\r\n    await Storage.put(file.name, file);\r\n    fetchNotes();\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        <style>{'body { background-color: #85929E ; }'}</style>\r\n        <h1>My Notes App</h1>\r\n        <input\r\n         onChange={e => setFormData({ ...formData, 'name': e.target.value})}\r\n         placeholder=\"Note name\"\r\n         value={formData.name}\r\n        />&nbsp;&nbsp;\r\n        <input\r\n         onChange={e => setFormData({ ...formData, 'description': e.target.value})}\r\n         placeholder=\"Note description\"\r\n         value={formData.description}\r\n       />&nbsp;&nbsp;\r\n       <input\r\n        type=\"file\"\r\n        onChange={onChange}\r\n       />\r\n       <button onClick={createNote}>{isUpdate?\"Update Node\":\"Create Note\"}</button>\r\n         <div style={{marginBottom: 30,marginTop:30}}>\r\n           <table>\r\n           <thead>\r\n            <tr>\r\n             <th>Name</th>\r\n             <th>Description</th>\r\n             <th>Pictures</th>\r\n             <th>Actions</th>\r\n           </tr>\r\n          </thead>\r\n         <tbody> \r\n           {notes.map((note,index) => (\r\n               <tr key={index} className=\"table-row\">\r\n               <td>{ note.name }</td>\r\n               <td>{ note.description}</td>\r\n               <td>{ note.image && <img src={note.image}/>}</td>\r\n               <td><button onClick={() => deleteNote(note)}>Delete note</button>\r\n               <button className=\"end-button\" onClick={() =>updateNote(note)}>Update note</button></td>\r\n              </tr>\r\n           ))}\r\n        </tbody>\r\n        </table>\r\n         </div>   \r\n       <AmplifySignOut />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withAuthenticator(App);","C:\\Users\\ATHUL\\amplifyapp\\src\\reportWebVitals.js",[],"C:\\Users\\ATHUL\\amplifyapp\\src\\aws-exports.js",[],"C:\\Users\\ATHUL\\amplifyapp\\src\\graphql\\mutations.js",[],"C:\\Users\\ATHUL\\amplifyapp\\src\\graphql\\queries.js",[],"C:\\Users\\ATHUL\\amplifyapp\\src\\updateUser.js",["35"],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":116,"column":36,"nodeType":"42","endLine":116,"endColumn":59},{"ruleId":"43","severity":1,"message":"44","line":2,"column":10,"nodeType":"45","messageId":"46","endLine":2,"endColumn":18},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'useTable' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]